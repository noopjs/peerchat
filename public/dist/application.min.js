"use strict";var ApplicationConfiguration=function(){var applicationModuleName="mean",applicationModuleVendorDependencies=["ngResource","ngAnimate","ui.router","ui.bootstrap","ui.utils"],registerModule=function(moduleName,dependencies){angular.module(moduleName,dependencies||[]),angular.module(applicationModuleName).requires.push(moduleName)};return{applicationModuleName:applicationModuleName,applicationModuleVendorDependencies:applicationModuleVendorDependencies,registerModule:registerModule}}();angular.module(ApplicationConfiguration.applicationModuleName,ApplicationConfiguration.applicationModuleVendorDependencies),angular.module(ApplicationConfiguration.applicationModuleName).config(["$locationProvider",function($locationProvider){$locationProvider.hashPrefix("!")}]),angular.element(document).ready(function(){"#_=_"===window.location.hash&&(window.location.hash="#!"),angular.bootstrap(document,[ApplicationConfiguration.applicationModuleName])}),ApplicationConfiguration.registerModule("core"),ApplicationConfiguration.registerModule("users"),angular.module("core").config(["$stateProvider","$urlRouterProvider",function($stateProvider,$urlRouterProvider){$urlRouterProvider.otherwise("/"),$stateProvider.state("home",{url:"/",templateUrl:"modules/core/views/home.client.view.html"})}]),angular.module("core").controller("HeaderController",["$scope","Authentication","Menus",function($scope,Authentication,Menus){$scope.authentication=Authentication,$scope.isCollapsed=!1,$scope.menu=Menus.getMenu("topbar"),$scope.toggleCollapsibleMenu=function(){$scope.isCollapsed=!$scope.isCollapsed},$scope.$on("$stateChangeSuccess",function(){$scope.isCollapsed=!1})}]),angular.module("core").controller("HomeController",["$scope","Authentication","Peer",function($scope,Authentication,Peer){$scope.authentication=Authentication,$scope.status=Peer.status,Peer.notify().then(function(){},function(){},function(status){$scope.status=status,$scope.name=Peer.name}),$scope.name=Peer.name,$scope.changeName=function(){Peer.setName($scope.name)},$scope.text="",$scope.peers=Peer.peers,$scope.curPeerNdx=-1,$scope.selectPeer=function(peer){$scope.text.length&&$scope.nextCmd(),$scope.curPeerNdx>=0&&$scope.peers[$scope.curPeerNdx].selected&&($scope.peers[$scope.curPeerNdx].selected=!1),$scope.curPeerNdx=_.findIndex($scope.peers,{_id:peer._id});var peer=$scope.peers[$scope.curPeerNdx];peer.selected=!0,peer.messages||(peer.messages=[]),peer.notify().then(function(){},function(){},function(msg){msg.send=!1;var ndx=_.findIndex(peer.messages,{ts:msg.ts,send:!1});0>ndx?peer.messages.push(msg):peer.messages[ndx].text=msg.text})},$scope.peers.length&&$scope.selectPeer($scope.peers[0]);var msg;$scope.textChange=function(){if(!($scope.curPeerNdx<0)&&$scope.peers[$scope.curPeerNdx].selected){var peer=$scope.peers[$scope.curPeerNdx];msg||(msg={send:!0,ts:Date.now()},peer.messages.push(msg)),msg.text=$scope.text,peer.send(msg)}},$scope.nextCmd=function(){$scope.textChange(),$scope.text="",msg=null},$scope.refresh=Peer.refresh}]),angular.module("core").service("Menus",[function(){this.defaultRoles=["*"],this.menus={};var shouldRender=function(user){if(!user)return this.isPublic;if(~this.roles.indexOf("*"))return!0;for(var userRoleIndex in user.roles)for(var roleIndex in this.roles)if(this.roles[roleIndex]===user.roles[userRoleIndex])return!0;return!1};this.validateMenuExistance=function(menuId){if(menuId&&menuId.length){if(this.menus[menuId])return!0;throw new Error("Menu does not exists")}throw new Error("MenuId was not provided")},this.getMenu=function(menuId){return this.validateMenuExistance(menuId),this.menus[menuId]},this.addMenu=function(menuId,isPublic,roles){return this.menus[menuId]={isPublic:isPublic||!1,roles:roles||this.defaultRoles,items:[],shouldRender:shouldRender},this.menus[menuId]},this.removeMenu=function(menuId){this.validateMenuExistance(menuId),delete this.menus[menuId]},this.addMenuItem=function(menuId,menuItemTitle,menuItemURL,menuItemType,menuItemUIRoute,isPublic,roles,position){return this.validateMenuExistance(menuId),this.menus[menuId].items.push({title:menuItemTitle,link:menuItemURL,menuItemType:menuItemType||"item",menuItemClass:menuItemType,uiRoute:menuItemUIRoute||"/"+menuItemURL,isPublic:null===isPublic||"undefined"==typeof isPublic?this.menus[menuId].isPublic:isPublic,roles:null===roles||"undefined"==typeof roles?this.menus[menuId].roles:roles,position:position||0,items:[],shouldRender:shouldRender}),this.menus[menuId]},this.addSubMenuItem=function(menuId,rootMenuItemURL,menuItemTitle,menuItemURL,menuItemUIRoute,isPublic,roles,position){this.validateMenuExistance(menuId);for(var itemIndex in this.menus[menuId].items)this.menus[menuId].items[itemIndex].link===rootMenuItemURL&&this.menus[menuId].items[itemIndex].items.push({title:menuItemTitle,link:menuItemURL,uiRoute:menuItemUIRoute||"/"+menuItemURL,isPublic:null===isPublic||"undefined"==typeof isPublic?this.menus[menuId].items[itemIndex].isPublic:isPublic,roles:null===roles||"undefined"==typeof roles?this.menus[menuId].items[itemIndex].roles:roles,position:position||0,shouldRender:shouldRender});return this.menus[menuId]},this.removeMenuItem=function(menuId,menuItemURL){this.validateMenuExistance(menuId);for(var itemIndex in this.menus[menuId].items)this.menus[menuId].items[itemIndex].link===menuItemURL&&this.menus[menuId].items.splice(itemIndex,1);return this.menus[menuId]},this.removeSubMenuItem=function(menuId,submenuItemURL){this.validateMenuExistance(menuId);for(var itemIndex in this.menus[menuId].items)for(var subitemIndex in this.menus[menuId].items[itemIndex].items)this.menus[menuId].items[itemIndex].items[subitemIndex].link===submenuItemURL&&this.menus[menuId].items[itemIndex].items.splice(subitemIndex,1);return this.menus[menuId]},this.addMenu("topbar")}]),angular.module("core").service("Peer",["$timeout","$http","$q",function($timeout,$http,$q){function status(what,params){that.status=what,console.log("Peer Status: "+what,params),that.notifications.notify(what)}function kick(){"connected"===that.status&&$http.put("/connections/"+that.connection._id).then(function(){$timeout(kick,that.keepAlive)},function(err){console.error("kick",err)})}function initPeer(p){p.notifications=$q.defer(),p.notify=function(){return p.notifications.promise},p.conn.on("data",function(d){p.notifications.notify(d)}),p.send=function(m){p.conn.send(m)},p.conn.on("close",function(){that.peers.splice(_.findIndex(that.peers,{_id:p._id}),1)}),p.conn.on("error",function(err){console.log("peer error",err)})}function trackPeers(){"connected"===that.status&&$http.get("/connections").then(function(resp){var connections=resp.data;that.peers.filter(function(p){return p._id!==that.connection._id}).map(function(p){return _.findIndex(connections,{_id:p._id})}).reverse().forEach(function(i){i>=0&&connections.splice(i,1)}),connections.forEach(function(p){p.conn=that.peer.connect(p.pid),initPeer(p),p.conn.on("open",function(){console.log("connection opened with ",p),that.peers.push(p),p.conn.send(that.connection)})}),$timeout(trackPeers,that.autoRefresh)})}function connect(){status("connecting"),that.peer=new Peer({key:"8yxqk2u1vz0yhkt9"}),that.peer.on("open",function(id){status("connected",id),that.id=id,that.retry=1e3,$http.post("/connections",{pid:id,name:that.name}).then(function(resp){that.connection=resp.data,that.name=that.connection.name,status(that.status,that.name),$timeout(kick,that.keepAlive),$timeout(trackPeers,that.retry)},function(err){console.error("connect/post",err)})}),that.peer.on("disconnected",function(){status("disconnected",that.retry),$timeout(function(){that.retry+=1e3,status("connecting"),that.peer.destroyed?connect():that.peer.reconnect()},that.retry)}),that.peer.on("error",function(err){console.log("Error",err)}),that.peer.on("connection",function(conn){conn.on("data",function(m){var ndx=_.findIndex(that.peers,{_id:m._id});return ndx>=0?void conn.close():(m.conn=conn,initPeer(m),void that.peers.push(m))})})}var that=this;that.name="",that.retry=1e3,that.keepAlive=18e4,that.autoRefresh=6e4,that.notifications=$q.defer(),that.peers=[],connect(),that.setName=function(name){that.name=name,$http.put("/connections/"+that.connection._id,{name:that.name}).then(function(resp){console.log("response",resp.data)},function(err){console.error("connect/setname",err)})},that.notify=function(){return that.notifications.promise},that.refresh=trackPeers}]),angular.module("users").config(["$httpProvider",function($httpProvider){$httpProvider.interceptors.push(["$q","$location","Authentication",function($q,$location,Authentication){return{responseError:function(rejection){switch(rejection.status){case 401:Authentication.user=null,$location.path("signin");break;case 403:}return $q.reject(rejection)}}}])}]),angular.module("users").config(["$stateProvider",function($stateProvider){$stateProvider.state("profile",{url:"/settings/profile",templateUrl:"modules/users/views/settings/edit-profile.client.view.html"}).state("password",{url:"/settings/password",templateUrl:"modules/users/views/settings/change-password.client.view.html"}).state("accounts",{url:"/settings/accounts",templateUrl:"modules/users/views/settings/social-accounts.client.view.html"}).state("signup",{url:"/signup",templateUrl:"modules/users/views/authentication/signup.client.view.html"}).state("signin",{url:"/signin",templateUrl:"modules/users/views/authentication/signin.client.view.html"}).state("forgot",{url:"/password/forgot",templateUrl:"modules/users/views/password/forgot-password.client.view.html"}).state("reset-invalid",{url:"/password/reset/invalid",templateUrl:"modules/users/views/password/reset-password-invalid.client.view.html"}).state("reset-success",{url:"/password/reset/success",templateUrl:"modules/users/views/password/reset-password-success.client.view.html"}).state("reset",{url:"/password/reset/:token",templateUrl:"modules/users/views/password/reset-password.client.view.html"})}]),angular.module("users").controller("AuthenticationController",["$scope","$http","$location","Authentication",function($scope,$http,$location,Authentication){$scope.authentication=Authentication,$scope.authentication.user&&$location.path("/"),$scope.signup=function(){$http.post("/auth/signup",$scope.credentials).success(function(response){$scope.authentication.user=response,$location.path("/")}).error(function(response){$scope.error=response.message})},$scope.signin=function(){$http.post("/auth/signin",$scope.credentials).success(function(response){$scope.authentication.user=response,$location.path("/")}).error(function(response){$scope.error=response.message})}}]),angular.module("users").controller("PasswordController",["$scope","$stateParams","$http","$location","Authentication",function($scope,$stateParams,$http,$location,Authentication){$scope.authentication=Authentication,$scope.authentication.user&&$location.path("/"),$scope.askForPasswordReset=function(){$scope.success=$scope.error=null,$http.post("/auth/forgot",$scope.credentials).success(function(response){$scope.credentials=null,$scope.success=response.message}).error(function(response){$scope.credentials=null,$scope.error=response.message})},$scope.resetUserPassword=function(){$scope.success=$scope.error=null,$http.post("/auth/reset/"+$stateParams.token,$scope.passwordDetails).success(function(response){$scope.passwordDetails=null,Authentication.user=response,$location.path("/password/reset/success")}).error(function(response){$scope.error=response.message})}}]),angular.module("users").controller("SettingsController",["$scope","$http","$location","Users","Authentication",function($scope,$http,$location,Users,Authentication){$scope.user=Authentication.user,$scope.user||$location.path("/"),$scope.hasConnectedAdditionalSocialAccounts=function(){for(var i in $scope.user.additionalProvidersData)return!0;return!1},$scope.isConnectedSocialAccount=function(provider){return $scope.user.provider===provider||$scope.user.additionalProvidersData&&$scope.user.additionalProvidersData[provider]},$scope.removeUserSocialAccount=function(provider){$scope.success=$scope.error=null,$http["delete"]("/users/accounts",{params:{provider:provider}}).success(function(response){$scope.success=!0,$scope.user=Authentication.user=response}).error(function(response){$scope.error=response.message})},$scope.updateUserProfile=function(isValid){if(isValid){$scope.success=$scope.error=null;var user=new Users($scope.user);user.$update(function(response){$scope.success=!0,Authentication.user=response},function(response){$scope.error=response.data.message})}else $scope.submitted=!0},$scope.changeUserPassword=function(){$scope.success=$scope.error=null,$http.post("/users/password",$scope.passwordDetails).success(function(){$scope.success=!0,$scope.passwordDetails=null}).error(function(response){$scope.error=response.message})}}]),angular.module("users").factory("Authentication",["$window",function($window){var auth={user:$window.user};return auth}]),angular.module("users").factory("Users",["$resource",function($resource){return $resource("users",{},{update:{method:"PUT"}})}]);